type Query {
  # HELLO I AM A QUERY
  info: String!
  # Arguments
  # filter: Hello
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  link(id: ID!): Link
  me: User!
  comments: [Comment!]!
}

type Mutation {

  post(url: String!, description: String!): Link!
  
  # Update a link
  updateLink(id: ID!, url: String, description: String): Link

  # Delete a link
  deleteLink(id: ID!): Link

  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
  deleteVote(linkId: ID!): Vote
  createComment(link: ID!, reply_to: ID, text: String!): Comment!
}

type Link {
  
  # AN ID OF THE LINK
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  count: Int!
  comments: [Comment!]!
  comment_count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Comment {
  id: ID!
  link: Link!
  user: User!
  replies: [Comment]
  reply_to: Comment
  text: String!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}